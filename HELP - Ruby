######################################################################################################
#             R U B Y
######################################################################################################
ruby-doc.org/core-1.9.3/	-- oficial doc site, defaults to the latest version, you can change that
rubygems.org				-- webpage that has al the ruby gems available.
rubular.com					-- webpage to analyze regular expressions.
https://github.com/vertiginous/pik
rvm.io/rvm/install
http://stackoverflow.com/questions/8845432/how-to-install-rvm-on-windows-7

irb = ruby terminal to run ruby commands
pik equivalent to rvm in linux
pry = ruby terminal with debug and colours

Object.kind_of? Type (class|Object|String|Fixnum)

%Q{} = double quoted string
%q{} = single quoted string
""
''

"Somethind #{Whatever is put in here will be evaluated as ruby code}"
	"3+3 = #{3+3}"
	RESULT => "3+3 = 6"
if using single quotes the result will be what is written
	'3+3 = #{3+3}'
	RESULT => '3+3 = #{3+3}'


my_var = "whatever"  Like in php|perl Ruby does not care what you put inside, you may put a String and then a Fixnum

use ALL_CAPITALS to define constants, this will be global
CONSTANTVAR = "constant value"


Every method is public by default
Protected
	every method down of protected is protected
Private
	everymethod down of private is private


:hello.to_s
=> "hello"

my_hello = :hello

my_var = (1..5)
my_var.cover? 6
=> false
my_var.cover? 5
=> true


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
if (thing)
	puts "echo"
else
	"elsed"
end

puts "echo" if (thing)
puts "elsed" if !(thing)
puts "elsed" unless (thing)

(thing) ? "echo" : "elsed"
"hello #{(3 eq 3) ? "world" : "not"}"
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

precedence &&/||/! > = > and/or/not
operators have precedence over keywords
$$ => and
|| => or
! => not


Everything is true except for false and nil

#if var is unassigned, false or nil assign it, else ignore it
var || = 1

var1,var2 = 1,2
var1
	=> 1
var2
	=> 2
var1,var2 = var2,var1
var1
	=> 2
var2
	=> 1

i = 0
while i<10
	puts i+=1
end
i = 0
until i==10
	puts i+=1
end

5.times { print "hi" }
=> "hihihihihi"
5.time do
	print "hi"
end

1.upto(5) do
end
5.downto(1) do
end



my_arr = [1,2,3,4,5,6]
my_arr[3]
	=> 4
my_arr.last = my_arr.[-1]	#and so on, -2 would be 5 in this case, -3 would be 4 in this case

my_arr = [1, "string", 5..10]	#this will be valid!

#if you ask for an out of bounds, you will get a nil
# if you try to assign for a positive out of bounds the arr will fill in the blanks with nil until the position asked
#ex:
my_arr =[1,2,3]
my_arr[5] = 6
my_arr
	=> [1,2,3,nil,nil,6]

#CReating a hash
my_hash = {"hello" => "world"}	#{key => value} key and value can be any value
#if the key is a simbol you can assign it as {symbol: value}
my_hash.each do |k,v|
	puts "the key is #{k}"
	puts "the value is #{v}"
end

my_hash.keys 	#returns array of keys
my_hash.values	#returns array of values
my_hash.has_key? key 	#returns true or false if it has it or not, same for value
my_hash.has_value? value 	#returns true or false if it has it or not, same for value




#This namespaces a class, to have classes in different namespaces
module Name
	class cName
	end
end


#REGEXP ~ Regexp CLASS
/something/	#this is a regular expression
pattern = /hi/
"hi there".match patern
=> #<MatchData "hi">	#Returns the found data of the pattern; nil for not found
"hi there" =~ pattern
=> 0					#Returns the first character of where the pattern is found; nil for not found
#the order may be reversed; Ex: pattern.match "hi there"; pattern =~ "hi there"
#Rubular.com	ruby regexp evaluator
"hello world".gsub(/hello/, "Good Bye")
"hello world".gsub(/\b\w/){|w| w.upcase}
=> "Hello World"
"hello world".gsub(/\b\W/){|w| '_'}
=> "hello_world"

#You may change classes on the fly
class String
	def title_case
		self.gsub(/\b\w){|w| w.upcase}
	end
end
stringi = "hello there mates"
stringi.title_case
=> "Hello There Mates"


#Inject can be used on any enumerator

arr=[]
arr << 1
arr << 2
arr << 3
arr
=> [1,2,3]


Rakefile
rake -T 	#shows all the commands available thru a rakefile
